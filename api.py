'''
MIT License

Copyright (c) 2020 S4E

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

#This code written for securityforeveryone.com users.
#Register at https://securityforeveryone.com/user/register for free scans.
#Latest CVE's updated regularly. 

import inquirer
import requests
import sys
import time
import pprint
import json
from requests.exceptions import HTTPError

_TOKEN      = "" #Enter your token here. Token info: https://securityforeveryone.com/settings
_API_URL    = "https://api.securityforeveryone.com"

def colered_str(text, color):
    CEND      = '\033[0m'
    CBOLD     = '\033[1m'
    CRED    = '\033[91m'
    CGREEN  = '\033[32m'
    CYELLOW = '\033[33m'
    CBLUE   = '\033[34m'
    if color == 'red':
        return CRED + CBOLD + text + CEND
    elif color == 'green':
        return CGREEN + CBOLD + text + CEND
    elif color == 'yellow':
        return CYELLOW + CBOLD + text + CEND
    elif color == 'blue':
        return CBLUE + CBOLD + text + CEND
   
def api_req(url,param={}):
    try:
        r = requests.get(url, params=param)
        response = r.json()
        return r.json(), r.status_code
    except HTTPError as http_err:
        sys.exit(colered_str('HTTP error occured: '+ str(http_err),'red'))
    except Exception as err:
        sys.exit(colered_str(r.url,'red'))
        sys.exit(colered_str('Other error occured: '+ str(err),'red'))

#fetching last cve's
def get_latest_cves_as_json():
    response, http_response_code = api_req(_API_URL+'/cve/last/10')
    if http_response_code != 200 or response == '':
        sys.exit(colered_str('Can not get latest cve`s. Empty result.','red'))
    return response

#return list of latest cve's
def create_option_form(cve_response):
    vulns = []
    for key in cve_response:
        select_str = key['slug']
        vulns.append(select_str)
    return vulns

def create_analysis(asset,slug):
    response, http_response_code = api_req(_API_URL+'/create', {'scan':slug, 'asset':asset, 'token':_TOKEN})
    if http_response_code != 200:
         sys.exit(colered_str('Response error !','red'))
    
    #too_many request
    if response['status_code'] == 'too_many_request':
        sys.exit(colered_str('Too many request for that token. Contact with s4e if you need more.','red'))

    #status_code
    if response['status_code'] != 'ok':
        sys.exit(colered_str('Problem occured. Check your asset is correct.','red'))

    #check if analysis_id exist, sys.exit if not
    return response['analysis_id']
    
#fetching the results
def get_analysis_report(analysis_id, asset):
    response, http_response_code = api_req(_API_URL+'/result', {'analysis_id':analysis_id, 'asset':asset, 'token':_TOKEN})
    return response, http_response_code

def main():
    print(colered_str('+ Getting latest cve list','blue'))
    latest_cves = get_latest_cves_as_json()

    #getting asset name
    questions = [
      inquirer.Text('Asset name', message="What's your asset")
    ]
    answer = inquirer.prompt(questions)
    asset = answer['Asset name']
    print("asset is: " + asset)

    #getting scan name
    questions = [
      inquirer.List('Scanner',
                    message="Choose vulnerability!",
                    choices=create_option_form(latest_cves),
                ),
    ]
    answer  = inquirer.prompt(questions)
    slug            = answer['Scanner']
    print(colered_str('+ Creating scan for '+ asset,  'blue'))
    analysis_id     = create_analysis(asset,slug)
    print(colered_str('+ Scan started, waiting scan to finish', 'blue'))
    
    #waiting for results
    counter = 0
    while(1):
        response, http_response_code = get_analysis_report(analysis_id, asset)
        counter += 1
        if counter > 12:
            sys.exit(colered_str("Scan did not finished in 60 seconds. Contact s4e to report the problem",  'red'))
        if response['status_code'] == 'not_finished':
            print(colered_str("Scan did not finished, please wait 5 seconds more",'yellow'))
            time.sleep(5)
        elif response['status_code'] == 'ok':
            print(colered_str("See your result at: " + "https://securityforeveryone.com/reports/" + response['analysis_id'],  'green'))
            sys.exit(colered_str(json.dumps(response),  'green'))
    
if __name__ == "__main__":
    main()  
